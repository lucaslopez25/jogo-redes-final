/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.edu.ifba.testebaianes.game;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Enumeration;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import br.edu.ifba.testebaianes.motor.Motor;
import br.edu.ifba.testebaianes.motor.Partida;
import br.edu.ifba.testebaianes.motor.Pergunta;

/**
 * @author kelvin
 * @author lucas
 * @author vitor
 */
public class Jogo extends javax.swing.JFrame {

    private ServerSocket serverSocket = null;
    private Socket socket = null;
    private ObjectInputStream input = null;
    private ObjectOutputStream output = null;
    
    private String player1, player2;
    private String message;
    private boolean pararSinal = true;
    
    private Motor nucleo = new Motor();;
    private Partida partida = null;
    private Pergunta perguntaCopy = null;
    private Game game = null;
    
    public Jogo() {
        initComponents();
        nextButton.setEnabled(false);
    }

    public Pergunta getPerguntaCopy() {
        return perguntaCopy;
    }

    public void setPerguntaCopy(Pergunta perguntaCopy) {
        this.perguntaCopy = perguntaCopy;
    }

    public Enumeration<AbstractButton> getButtonElements() {
        return buttonGroup1.getElements();
    }

    public void setButtonGroup1(ButtonGroup buttonGroup1) {
        this.buttonGroup1 = buttonGroup1;
    }

    public JLabel getLabelPergunta() {
        return labelPergunta;
    }

    public void setLabelPergunta(String texto) {
        this.labelPergunta.setText(texto);
    }

    protected Pergunta getNext(){
        return partida.getNext();
    }

    public Partida getPartida() {
        return partida;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        inputIP = new javax.swing.JTextField();
        inputPorta = new javax.swing.JTextField();
        inputNome = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        loginButton = new javax.swing.JButton();
        createButton = new javax.swing.JButton();
        restartButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        nextButton = new javax.swing.JButton();
        labelPergunta = new javax.swing.JLabel();
        respostaA = new javax.swing.JRadioButton();
        respostaB = new javax.swing.JRadioButton();
        respostaC = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        chat = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Teste BaianÃªs");
        setMinimumSize(new java.awt.Dimension(493, 590));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        inputIP.setText("127.0.0.1");

        inputPorta.setText("2280");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 0));
        jLabel1.setText("IP:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 0));
        jLabel2.setText("PORTA:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 0));
        jLabel3.setText("NOME:");

        loginButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        loginButton.setText("ENTRAR");
        loginButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        loginButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        createButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        createButton.setText("CRIAR");
        createButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        createButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        restartButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        restartButton.setText("REINICIAR");
        restartButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        restartButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        restartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartButtonActionPerformed(evt);
            }
        });

        resetButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        resetButton.setText("RESETAR");
        resetButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        resetButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(inputIP, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputPorta, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(createButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(inputNome)
                    .addComponent(restartButton, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputPorta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(restartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 490, -1));

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        nextButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        nextButton.setText("PRÃXIMA");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        labelPergunta.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelPergunta.setText("PERGUNTA");

        respostaA.setBackground(new java.awt.Color(204, 204, 204));
        buttonGroup1.add(respostaA);
        respostaA.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        respostaA.setText("RESPOSTA A");
        respostaA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                respostaAActionPerformed(evt);
            }
        });

        respostaB.setBackground(new java.awt.Color(204, 204, 204));
        buttonGroup1.add(respostaB);
        respostaB.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        respostaB.setText("RESPOSTA B");
        respostaB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                respostaBActionPerformed(evt);
            }
        });

        respostaC.setBackground(new java.awt.Color(204, 204, 204));
        buttonGroup1.add(respostaC);
        respostaC.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        respostaC.setText("RESPOSTA C");
        respostaC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                respostaCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(193, Short.MAX_VALUE)
                .addComponent(nextButton)
                .addGap(206, 206, 206))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelPergunta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(respostaA)
                            .addComponent(respostaC)
                            .addComponent(respostaB))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelPergunta, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(respostaA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(respostaB)
                .addGap(45, 45, 45)
                .addComponent(respostaC)
                .addGap(45, 45, 45)
                .addComponent(nextButton)
                .addContainerGap())
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 490, 310));

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));

        chat.setBackground(new java.awt.Color(51, 51, 51));
        chat.setColumns(20);
        chat.setForeground(new java.awt.Color(255, 255, 0));
        chat.setRows(5);
        jScrollPane1.setViewportView(chat);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 410, 490, 150));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        try{
            if(inputNome.getText().equals("")){
                try{
                    JOptionPane.showMessageDialog(null, "Insira seu nome");
                }
                catch(Exception e){
                }
                return;
            }
            socket = new Socket(inputIP.getText(), Integer.parseInt(inputPorta.getText()));
            output = new ObjectOutputStream(socket.getOutputStream());
            output.flush();
            input = new ObjectInputStream(socket.getInputStream());
            
            chat.append("AdversÃ¡rio encontrado! \n");
            player1 = inputNome.getText();
            message = (String) input.readObject();
            player2 = message;
            chat.append("Seu adversÃ¡rio: " + player2 + "\n");
            
            comunicate(player1);
            
            inputIP.setEnabled(false);
            inputPorta.setEnabled(false);
            inputNome.setEnabled(false);
            loginButton.setEnabled(false);
            createButton.setEnabled(false);
            
            chat.append("Partida iniciando. \n");
            chat.setCaretPosition(chat.getText().length());
            
            new recebeMensagem("Recebe");	
        }catch(Exception e){
            finish();
        }
    }                                           

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        if(inputNome.getText().equals("")){
            try {
                JOptionPane.showMessageDialog(null, "Insira seu nome");
            } catch (Exception exc) {
            }
            return;
        }
        inputIP.setEnabled(false);
        inputPorta.setEnabled(false);
        inputNome.setEnabled(false);
        loginButton.setEnabled(false);
        createButton.setEnabled(false);
        new serverThread();
    }                                            

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        boolean seq = false;
        int resp = -1;
        Enumeration<AbstractButton> lista = buttonGroup1.getElements();
        int ponteiro = 0;
            while(lista.hasMoreElements()){
                AbstractButton botao = lista.nextElement();
                if(botao.isSelected()){
                    seq = true;
                    resp = ponteiro;
                }
                ponteiro++;
            }
        if(seq){
            boolean ver = perguntaCopy.verificarResposta(resp);
            if(ver){
                partida.addPontos();
            }
            game.setPausado(false);
            nextButton.setEnabled(false);
            cleanButtonGroup();
        }else{
            try{
                JOptionPane.showMessageDialog(null, "Selecione uma opÃ§Ã£o!");
            }catch(Exception e){
            }
        }
    }                                          

    private void respostaAActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        if(!nextButton.isEnabled()){
            nextButton.setEnabled(true);
        }
    }                                         

    private void respostaBActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        if(!nextButton.isEnabled()){
            nextButton.setEnabled(true);
        }
    }                                         

    private void respostaCActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        if(!nextButton.isEnabled()){
            nextButton.setEnabled(true);
        }
    }                                         

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        int opcao = JOptionPane.showConfirmDialog(null, "VocÃª irÃ¡ sair da partida atual, deseja realmente resetar?");
        if(opcao==0){
            JOptionPane.showMessageDialog(null, "Resetando jogo...\nVocÃª deverÃ¡ entrar ou criar uma nova partida.");
            finish();
            restartAfterOut();
        }
    }                                           

    private void restartButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        //reiniciar com o mesmo adversario
        JOptionPane.showMessageDialog(null, "O seu adversÃ¡rio precisa aceitar, aguardando resposta...");
        chat.append("Agaurdando resposta do adversÃ¡rio...\n");
        comunicate("reiniciar");
    }                                             

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Jogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Jogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Jogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Jogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Jogo().setVisible(true);
            }
        });
    }
    
    private void finish(){
        try {
            if(!(serverSocket==null))
                serverSocket.close();
        } catch (IOException ex) {
        }
        try {
            if(!(socket==null))
            socket.close();
        } catch (IOException ex) {
        }
        try {
            if(!(input==null))
            input.close();
        } catch (IOException ex) {
        }
        try {
            if(!(output==null))
            output.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Desculpe! Um erro inesperado aconteceu.\nFinalizando o Jogo!");
            this.dispose();
        }
    }
    
    private void cleanButtonGroup(){
        Enumeration<AbstractButton> lista = buttonGroup1.getElements();
        while(lista.hasMoreElements()){
            AbstractButton botao = lista.nextElement();
            botao.setSelected(false);
        }
    }
    
    //funÃ§Ã£o utilizada para liberar recursos de configuraÃ§Ã£o do usuÃ¡rio e limpar campos
    private void restartAfterOut(){
        labelPergunta.setText(" ");
        Enumeration<AbstractButton> botoes = buttonGroup1.getElements();
        while(botoes.hasMoreElements()){
            AbstractButton botao = botoes.nextElement();
            botao.setText(" ");
        }
        nextButton.setEnabled(false);
        inputIP.setEnabled(true);
        inputPorta.setEnabled(true);
        inputNome.setEnabled(true);
        loginButton.setEnabled(true);
        createButton.setEnabled(true);
    }
    //funÃ§Ã£o para realizar o envio de mensagens e objetos para o cliente ou servidor
    protected void comunicate(Object obj) {
        try {
            if (pararSinal) {
                output.writeObject(obj);
                output.flush();
            }
        } catch (Exception e) {
            if (pararSinal) {
                pararSinal = false;
                JOptionPane.showMessageDialog(null, "Desculpe, mas houve algum problema na comunicaÃ§Ã£o com seu adversÃ¡rio.\nReiniciando o jogo.");
                finish();
                restartAfterOut();
            }
        }
    }
    protected void finalizarPartida(){
        partida.setFimPartida(System.currentTimeMillis()/1000);
        chat.append("Esperando seu adversÃ¡rio terminar!\n");
        setButtonsEnabled(false);
    }
    
    private void setButtonsEnabled(boolean info){
        labelPergunta.setText("-");
        labelPergunta.setEnabled(info);
        this.nextButton.setEnabled(info);
        Enumeration<AbstractButton> botoes = buttonGroup1.getElements();
        while(botoes.hasMoreElements()){
            AbstractButton botao = botoes.nextElement();
            botao.setText("-");
            botao.setEnabled(info);
        }
    }
    /*
        *funÃ§Ã£o utilzada pelo servidor
        *apÃ³s o cliente estabelecer conexÃ£o
        *o mÃ©todo prepare() preapara uma partida com a quantidade de perguntas informadas
        *em seguinte, envia os dados da partida para o cliente
    */
    private void prepare(){
        int qtdPerguntas = 10;
        partida = nucleo.criarPartida(qtdPerguntas, player1);
        Partida partidaToClient = new Partida();
        partidaToClient.setPerguntas(partida.getDados());
        comunicate(partidaToClient);
    }
    
    private void reiniciarPartida(){
        partida = null;
        game.setEnd(true);
        game = null;
        setButtonsEnabled(true);
        chat.append("Reiniciando partida! \n");
    }

    // Variables declaration - do not modify                     
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextArea chat;
    private javax.swing.JButton createButton;
    private javax.swing.JTextField inputIP;
    private javax.swing.JTextField inputNome;
    private javax.swing.JTextField inputPorta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelPergunta;
    private javax.swing.JButton loginButton;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JRadioButton respostaA;
    private javax.swing.JRadioButton respostaB;
    private javax.swing.JRadioButton respostaC;
    private javax.swing.JButton restartButton;
    // End of variables declaration                   
    
    private class serverThread implements Runnable{
        public serverThread() {
            new Thread(this).start();
        }
        
        public void run() {
            try {
                serverSocket = new ServerSocket(Integer.parseInt(inputPorta.getText()));
                chat.append("Esperando adversÃ¡rio");
                socket = serverSocket.accept();
                output = new ObjectOutputStream(socket.getOutputStream());
                input = new ObjectInputStream(socket.getInputStream());
                
                chat.append("AdversÃ¡rio encontrado! \n");
                comunicate(inputNome.getText());
                
                player1 = inputNome.getText();
                message = (String)input.readObject();
                player2 = message;
                chat.append("Seu adversÃ¡rio: " + player2 + "\n");
                chat.append("Partida iniciando! \n");
                
                prepare();
                new recebeMensagem("recebeData");
            } catch (Exception ex) {
                finish();
            }
        }
    }
    //funcao responsavel por receber obejtos quando sÃ£o enviados
    private class recebeMensagem implements Runnable{
            private boolean auxsinal;
            private String mssg;

            public recebeMensagem(String txt) {
                auxsinal = true;
                mssg = txt;
                new Thread(this, mssg).start();
            }
            
            
            public void run() {
                while(auxsinal){
                    try{
                        Object obj = null;
                        obj = input.readObject();	
                        if (mssg.equals("Recebe")){ //recebe como cliente
                            if(obj instanceof Partida){
                                partida = (Partida) obj;
                                partida.setJogador(player1);
                                //start = true;
                                comunicate("startTrue");
                                game = new Game(Jogo.this);
                                partida.setInicioPartida(System.currentTimeMillis()/1000);
                                restartButton.setEnabled(false);
                            }else if (obj instanceof String) {
                                String info = (String)obj;
                                if(info.equals("reiniciar")){
                                    int option = JOptionPane.showConfirmDialog(null, "Seu adversÃ¡rio quer reiniciar a partida, deseja jogar novamente?");
                                    if(option==0){
                                        comunicate("reiniciarConfirm");
                                        reiniciarPartida();
                                    }
                                }else if(info.equals("reiniciarConfirm")){
                                    chat.append(player2+" aceitou seu pedido para jogar novamente!\n");
                                    reiniciarPartida();
                                }else if(info.equals("partidaEnd")){
                                    partida.setOpponentEnded(true);
                                }
                            }else if(obj instanceof Integer){
                                if(!game.isEnd()){
                                    comunicate(partida.getPontos());
                                    int pontosAdv = (int)obj;
                                    if(pontosAdv > partida.getPontos()){
                                        JOptionPane.showMessageDialog(null, "NÃ£o foi dessa vez! O jogador " + player2 + " ganhou a partida!");
                                    }else if(pontosAdv < partida.getPontos()){
                                        JOptionPane.showMessageDialog(null, "ParabÃ©ns! VocÃª ganhou a partida!");
                                    }else{
                                        comunicate(partida.getDuracao());
                                    }
                                    game.setEnd(true);
                                    restartButton.setEnabled(true);
                                }
                            }else if(obj instanceof Long){
                                long pontosAdv = (long)obj;
                                if(pontosAdv < partida.getDuracao()){
                                    JOptionPane.showMessageDialog(null, "NÃ£o foi dessa vez! O jogador " + player2 + " ganhou a partida!");
                                }else if(pontosAdv > partida.getDuracao()){
                                    JOptionPane.showMessageDialog(null, "ParabÃ©ns! VocÃª ganhou a partida!");
                                }else{
                                    JOptionPane.showMessageDialog(null, "IncrÃ­vel, vocÃªs empataram!");
                                }
                                restartButton.setEnabled(true);
                            }
                        } else if (mssg.equals("recebeData")){ //recebe como server
                            if (obj instanceof String) {
                                String info = (String)obj;
                                if(info.equals("startTrue")){
                                    game = new Game(Jogo.this);
                                    partida.setInicioPartida(System.currentTimeMillis()/1000);
                                    restartButton.setEnabled(false);
                                }else if(info.equals("reiniciar")){
                                    int option = JOptionPane.showConfirmDialog(null, "Seu adversÃ¡rio quer reiniciar a partida, deseja jogar novamente?");
                                    if(option==0){
                                        comunicate("reiniciarConfirm");
                                        reiniciarPartida();
                                        prepare();
                                    }
                                }else if(info.equals("reiniciarConfirm")){
                                    chat.append(player2+" aceitou seu pedido para jogar novamente!\n");
                                    reiniciarPartida();
                                    prepare();
                                }else if(info.equals("partidaEnd")){
                                    partida.setOpponentEnded(true);
                                }
                            }else if(obj instanceof Integer){
                                if(!game.isEnd()){
                                    comunicate(partida.getPontos());
                                    int pontosAdv = (int)obj;
                                    if(pontosAdv > partida.getPontos()){
                                        JOptionPane.showMessageDialog(null, "NÃ£o foi dessa vez! O jogador " + player2 + " ganhou a partida!");
                                    }else if(pontosAdv < partida.getPontos()){
                                        JOptionPane.showMessageDialog(null, "ParabÃ©ns! VocÃª ganhou a partida!");
                                    }else{
                                        comunicate(partida.getDuracao());
                                    }
                                    game.setEnd(true);
                                    restartButton.setEnabled(true);
                                }
                            }else if(obj instanceof Long){
                                long pontosAdv = (long)obj;
                                if(pontosAdv < partida.getDuracao()){
                                    JOptionPane.showMessageDialog(null, "NÃ£o foi dessa vez! O jogador " + player2 + " ganhou a partida!");
                                }else if(pontosAdv > partida.getDuracao()){
                                    JOptionPane.showMessageDialog(null, "ParabÃ©ns! VocÃª ganhou a partida!");
                                }else{
                                    JOptionPane.showMessageDialog(null, "IncrÃ­vel, vocÃªs empataram!");
                                }
                                restartButton.setEnabled(true);
                            }
                        } 
                    }catch(Exception ex){
                        auxsinal = false;
                        JOptionPane.showMessageDialog(null, "O seu adversÃ¡rio saiu da partida!");
                        chat.append("Por favor, selecione novamente 'Entrar' ou 'Criar' para jogar. \n");
                        finish();
                        restartAfterOut();
                    }
                }
            }
    }
    
    
    
}
